#!/bin/bash

cwd=$(pwd)
workdir=$(dirname $0)

. $workdir/functions.sh

function getJsonVal() { 
  if [ \( $# -ne 1 \) -o \( -t 0 \) ]; then
    echo "Usage: getJsonVal 'key' < /tmp/file";
    echo "   -- or -- ";
    echo " cat /tmp/input | getJsonVal 'key'";
    return;
  fi;
  python -c "import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1))";
}

function getXmlVal() {
  python -c "import xml.etree.ElementTree as ET;tree = ET.parse('$cwd/pom.xml');root = tree.getroot();print tree.find('./{http://maven.apache.org/POM/4.0.0}artifactId').text"
}

function getTomlVal() {
  cat $cwd/Cargo.toml | sed -n 's/^name = "\(.*\)"/\1/p'
}



function resolve_module
{
  if [ -f $cwd/package.json ]; then
    module="seges/mug-frontend-javascript"
    project_name=$(cat $cwd/package.json | getJsonVal "['name']" | sed -e 's/^"//'  -e 's/"$//')
    version=":10.16.3"
  elif [ -f $cwd/build.sbt ]; then
    module="seges/mug-backend-scala"
    project_name=$(cat $cwd/build.sbt | grep "name" | sed 's/.*"\([^"]*\)"/\1/')
  elif [ -f $cwd/project.clj ]; then
    module="seges/mug-backend-clojure"
    project_name=$(cat $cwd/project.clj | grep "defproject" | sed 's/.*\/\([^"]*\)/\1/' | cut -d" " -s -f1)
  elif [ -f $cwd/pom.xml ]; then
    module="seges/mug-backend-java"
    project_name=$(cat $cwd/pom.xml | getXmlVal )
  elif [ -f $cwd/Cargo.toml ]; then
    module="seges/mug-rust"
    project_name=$(getTomlVal)
  fi
}

function resolve_version
{
  local _module="$1"
  local _version=""
  
  for version in $versions; do
    arrIN=(${version//:/ })
    if [ "${arrIN[0]}" == "$_module" ]; then
      eval "_version=${arrIN[1]}"
    fi 
  done

  echo ":$_version"
}

while getopts "hlm:v:" opt; do
  case $opt in
    l)
      docker images | grep mug-
      exit 0 
      ;;
    m)
      module=$OPTARG
      project_name=$(basename $cwd)
      ;;
    v)
      version=":$OPTARG"
      ;;
    h)
      echo "$(basename $0) [OPTION] [COMMAND]...
			
      -l List mug modules available as Docker images (prepended with 'mug-')
      -m <module> Explicit name of the module in the format [repository/][org/]image
      -v <version> Version of the module image to be used
      -h This help

      COMMAND Optional command for picking different mug functionality, now available are:
        * clean
        * discovery
        * docker-base

      == clean ==

      Removes either stale images or containers by entering:
        * ps
        * images

      == discovery ==

      Opens a browser with Consul UI

      == docker-base ==

      Starts local development environment with Ambassador and Consul using Cutlery project ( https://github.com/seges/cutlery )

      Format: docker-base <action> [<interface>]

      Action is one of:
        * start
        * stop
        * restart

      Interface name is important in start and restart commands.
      "
    exit 42
  esac
done

# After getopts is done, shift all processed options away with
shift $((OPTIND-1))

[ "$MUG_HOME" == "" ] && MUG_HOME="/usr/local/mug" && echo "Mug home = $MUG_HOME"


resolve_mugrc

if [ "$base_autostart" == "true" ]; then

  mug_consul=$(docker ps -f status=running|grep consul| wc -l)
  if [ $mug_consul -eq 0 ]; then
    echo "Auto-starting Docker base"
    $MUG_HOME/bin/mug-docker-base restart
  fi
fi

if [ "$1" == "" ]; then
  [ "$module" == "" ] && resolve_module
  #echo "module = $module, version = $version"
  [ "$version" == "" ] && version=$(resolve_version $module)

  if [ "$module" == "" ]; then
    echo "I don't think $cwd contains any supported project"
    exit 42
  fi


  if [ "$module" == "seges/mug-frontend-javascript" ]; then
#    if [ -z "$ports" ]; then
#      ports="-p 3000:3000"
#    fi
    echo "$environments" | grep DISPLAY
    if [ $? -ne 0 ]; then
      environments="$environments -e DISPLAY=$DISPLAY"
    fi
    echo "$volumes" | grep /tmp/.X11-unix 
    if [ $? -ne 0 ]; then
      volumes="$volumes -v /tmp/.X11-unix:/tmp/.X11-unix"
    fi
  elif [ "$module" == "seges/mug-backend-scala" ]; then
    volumes="$volumes -v $HOME/.ivy2-mug:/home/developer/.ivy2"
    volumes="$volumes -v $HOME/.m2-mug:/home/developer/.m2"
  elif [ "$module" == "seges/mug-backend-java" ]; then
    volumes="$volumes -v $HOME/.m2-mug:/home/developer/.m2"
  elif [ "$module" == "seges/mug-rust" ]; then
    environments="$environments -e RUN_IN_FOREGROUND=true"
    volumes="-v $HOME/.cargo/registry:/usr/local/cargo/registry $volumes"
    # a bit of a hack...
    version=":1.47.0-slim bash"
  fi

  volumes="-v $HOME/.gnupg:/home/developer/.gnupg -v $HOME/.ssh:/home/developer/.ssh $volumes"
  if [ -z $mug_relative_base_dir ]; then
    volumes="-v $cwd:/home/developer/$project_name $volumes"
  else
    if [ -z $mug_relative_project_name ]; then
      volumes="-v $cwd/$mug_relative_base_dir:/home/developer/$project_name $volumes"
    else
      volumes="-v $cwd/$mug_relative_base_dir:/home/developer/$mug_relative_project_name $volumes"
    fi
  fi

  mug_data_image=$(docker ps -f status=running|grep mug-data| wc -l)

  if [ $mug_data_image -eq 1 ]; then
    echo "Using existing mug data image"
    volumes_from="--volumes-from mug-data"
  elif [ ! "$mug_data" == "" ]; then
    echo "Going to start configured mug data image"
    volumes_from="--volumes-from mug-data"
    mug_data_cmd="$workdir/mug-data"
  fi


  echo "workdir $workdir"

  echo "Running $project_name in $cwd as $module$version [ environments = $environments, volumes = $volumes , ports = $ports, volumes-from = $volumes_from, expose = $expose, $mug_data]"

  docker_cmd="docker run $environments $expose $ports $links $volumes $volumes_from --rm -ti $module$version"

  if [ "$mug_data_cmd" == "" ]; then
    $docker_cmd
  else
    $mug_data_cmd && $docker_cmd
  fi
else
  cmd=$1
  shift

  $MUG_HOME/bin/mug-$cmd $@
fi

